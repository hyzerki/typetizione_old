import { OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit, SubscribeMessage, WebSocketGateway, WebSocketServer } from '@nestjs/websockets';
import { Server, Socket } from "Socket.IO";
import { LobbyService } from './lobby.service';
import { PlayerService } from 'src/player/player.service';
import { GameService } from 'src/game/game.service';
import Seeker from './class/Seeker';
import Lobby from './interface/Lobby';
import { Inject } from '@nestjs/common';

const GAME_MAX_PLAYERS = 2;



function countPlayers(arr: Seeker[]) {
  return arr.map(element => element.players.length).reduce((a, b) => a + b);
}

//–•—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏
@WebSocketGateway({
  cors: { origin: "*" },
  serveClient: false,
  namespace: "lobby",
})
export default class LobbyGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {

  constructor(private lobbyService: LobbyService, private playerService: PlayerService, private gameService: GameService) { }

  //todo –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–±–±–∏ –≤ redis
  static lobbies: Map<string, Lobby> = new Map();
  static searchQueue: Seeker[] = new Array<Seeker>();

  @Inject()
  static gameService;

  @WebSocketServer()
  server: Server;



  afterInit(server: Server) {

  }


  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –∞–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ç–æ—Ç –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å 
   * @param client —Ç–æ—Ç, –∫—Ç–æ –ø—Ä–∏–≥–≥–ª–∞–≥–∞–µ—Ç –∫ —Å–µ–±–µ –≤ –ª–æ–±–±–∞–∫
   * @param payload  –∞–π–¥–∏ —Ç–æ–≥–æ, –∫–æ–≥–æ –Ω–∞–¥–æ –ø–æ–∑–≤–∞—Ç—å –≤ –ª–æ–±–±–∞–∫
   */
  @SubscribeMessage("invite")
  handleInvite(client: Socket, payload: any) {
    const player_id = client.data.player_id as string;
    this.server.to(payload).emit("invite", player_id);
  }

  /**
   * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ª–æ–±–±–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–±–±–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
   * @param client –ö–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª–æ–±–±–∏
   * @param payload  –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –ª–æ–±–±–∏ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
   */
  @SubscribeMessage("join_lobby")
  handleJoinLobby(client: Socket, payload: any) {
    const player_id = client.data.player_id as string;
    const username = client.data.username as string;
    const currentLobbyId = client.data.lobby_id as string;
    const newLobby = [...LobbyGateway.lobbies.values()].find(entry => entry.players.some(player => player.player_id == payload));
    console.log("payload", payload)
    const currentLobby = LobbyGateway.lobbies.get(currentLobbyId);


    console.log("currentLobby ", currentLobby);
    console.log("newLobby", newLobby);
    if (currentLobby.id === newLobby.id) {
      return;
    }

    if (currentLobby.players.length <= 1) {
      LobbyGateway.lobbies.delete(currentLobbyId);
    } else {
      currentLobby.players = currentLobby.players.filter(p => p.player_id != player_id);
      this.server.to(currentLobby.id).emit("lobby_changed", LobbyGateway.lobbies.get(currentLobby.id));
      this.server.to(currentLobby.id).emit("log", `–ò–≥—Ä–æ–∫ ${username} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É.`)
    }
    client.leave(currentLobbyId);

    client.data.lobby_id = newLobby.id;
    LobbyGateway.lobbies.get(newLobby.id).players.push({ player_id, username });
    client.join(newLobby.id);
    this.server.to(newLobby.id).emit("lobby_changed", LobbyGateway.lobbies.get(newLobby.id));
    this.server.to(newLobby.id).emit("log", `–ò–≥—Ä–æ–∫ ${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ.`)
  }

  /**
   * –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ö–µ–Ω–¥—à–µ–π–∫ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∞–π–¥–∏ –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–±–±–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–≥—Ä–æ–∫, –∞ —Ç–∞–∫–∂–µ –∏–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É —Å–æ —Å–≤–æ–∏–º –∞–π–¥–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –≤ —Ö–µ–Ω–¥—à–µ–π–∫–µ. –í —Ö–µ–Ω–¥—à–µ–π–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–π–¥–∏ –ª–æ–±–±–∏, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –µ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å
   * @param client –í —Ö–µ–Ω–¥—à–µ–π–∫–µ —Ö—Ä–∞–Ω–∏—Ç {player_id: string, username: string}
   * @param args 
   */
  handleConnection(client: Socket, ...args: any[]) {
    console.log("New client!");
    const player_id = client.handshake.query.player_id as string;
    const username = client.handshake.query.username as string;
    console.log(client.handshake.query);
    client.data.player_id = player_id;
    client.data.username = username;
    client.data.lobby_id = client.id;
    LobbyGateway.lobbies.set(client.id, { id: client.id, players: [{ player_id, username }] });
    client.join(player_id);
    this.server.to(client.id).emit("lobby_changed", LobbyGateway.lobbies.get(client.id));
    console.log(client.rooms)
  }



  /**
   * –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ª–æ–±–±–∏ –∏ –µ—Å–ª–∏ –ª–æ–±–±–∏ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—É—Å—Ç—ã–º –º—ã –ª–æ–±–±–∏ —É–¥–∞–ª—è–µ–º.
   * –ï—Å–ª–∏ –ª–æ–±–±–∏ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É.
   * @param client 
   * @returns 
   */
  handleDisconnect(client: Socket) {
    const player_id = client.data.player_id as string;
    const username = client.data.username as string;
    const lobby_id = client.data.lobby_id as string;
    const lobby = LobbyGateway.lobbies.get(lobby_id);
    this.handleCancelQueue(client);
    if (lobby.players.length <= 1) {
      LobbyGateway.lobbies.delete(lobby_id);
      return;
    }
    lobby.players = lobby.players.filter(p => p.player_id != player_id);
    this.server.to(lobby_id).emit("lobby_changed", LobbyGateway.lobbies.get(lobby_id));
    this.server.to(lobby_id).emit("log", `–ò–≥—Ä–æ–∫ ${username} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É (Disconnect).`);
  }

  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –µ–≥–æ –≤—Å–µ–º –≤ –ª–æ–±–±–∏ –¥–æ–±–∞–≤–ª—è—è –∫ –Ω–µ–º—É –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–º –µ–≥–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∏–ø–∞ "[username]: [payload]"
   * @param client –û—Ç–ø—Ä–∞–≤–∏–≤—à–∏–π —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param payload –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  @SubscribeMessage('message')
  handleMessage(client: Socket, payload: any) {
    console.log(client.data);
    console.log("message: ", payload);
    this.server.to(client.data.lobby_id).emit("message", { data: client.data, text: payload });
    console.log("sent");
  }

  @SubscribeMessage("leave_lobby")
  handleLeaveLobby(client: Socket, payload: any) {

    // uuid.v4();
    const player_id = client.data.player_id as string;
    const username = client.data.username as string;
    const currentLobbyId = client.data.lobby_id as string;
    const newLobbyId = this.lobbyService.generateNewLobbyUUID();
    const currentLobby = LobbyGateway.lobbies.get(currentLobbyId);
    this.handleCancelQueue(client)

    if (currentLobby.players.length <= 1) {
      LobbyGateway.lobbies.delete(currentLobbyId);
    } else {
      currentLobby.players = currentLobby.players.filter(p => p.player_id != player_id);
      this.server.to(currentLobby.id).emit("lobby_changed", LobbyGateway.lobbies.get(currentLobby.id));
      this.server.to(currentLobby.id).emit("log", `–ò–≥—Ä–æ–∫ ${username} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É.`)
    }
    client.leave(currentLobbyId);
    LobbyGateway.lobbies.set(newLobbyId, { id: newLobbyId, players: [{ player_id, username }] });
    console.log("–ù–æ–≤–æ–µ –ª–æ–±–±–∏: ", LobbyGateway.lobbies.get(newLobbyId));


    client.data.lobby_id = newLobbyId;
    client.join(newLobbyId);

    this.server.to(newLobbyId).emit("lobby_changed", LobbyGateway.lobbies.get(newLobbyId));
    this.server.to(newLobbyId).emit("log", `–ò–≥—Ä–æ–∫ ${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ.`)
  }


  //<==================================================================================================================>

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫, —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –∏ –≤ –ª–æ–±–±–∏ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–∏–∂–Ω—è—è –∏ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞.
   * –ì—Ä–∞–Ω–∏—Ü–∞: —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø–µ +150 –∏ —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–≥–∏–π -150.
   * –ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 10—Å–µ–∫ –ø–æ +100 –∏ -100 –∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ –ø–æ–∏—Å–∫–µ, –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–æ–¥ –≥—Ä–∞–Ω–∏—Ü—ã.
   * –¢–∞–∫ –∂–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ –ø–æ–∏—Å–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≥—Ä—É–ø–ø–∞–º, –≤–µ–¥—É—â–∏–º –ø–æ–∏—Å–∫
   * @param client –∏–≥—Ä–æ–∫, –Ω–∞–∂–∞–≤—à–∏–π –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
   * @param payload –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ {type: [ranked, casual], }
   */
  @SubscribeMessage("start_queue")
  async handleStartRankedSearch(client: Socket, payload: any) {

    const gameType = payload.gameType;
    const languages = payload.languages;
    const lobby = LobbyGateway.lobbies.get(client.data.lobby_id);
    const players = await this.playerService.findMany(lobby.players.map(p => { return { id: +p.player_id } }));

    const lowerBound = Math.min.apply(Math, players.map(p => p.rating)) - 150;
    const upperBound = Math.max.apply(Math, players.map(p => p.rating)) + 150;
    const newSeeker: Seeker = new Seeker(lobby.id, lobby.players, gameType, languages, lowerBound, upperBound, this);
    console.log("üöÄ ~ file: lobby.gateway.ts:195 ~ LobbyGateway ~ handleStartRankedSearch ~ newSeeker:", newSeeker)
    LobbyGateway.searchQueue.push(newSeeker)
    this.server.to(lobby.id).emit("start_queue");
    //todo –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ —Ç–∞–∫–æ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –±–æ–ª—å—à–µ —Ç–æ–≥–æ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã - —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–º –∏–≥—Ä—É –±–µ–∑ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
    if (lobby.players.length >= GAME_MAX_PLAYERS) {
      console.log("–°–†–ê–ó–£ –°–¢–ê–†–¢–£–ï–ú!");
      clearInterval(newSeeker.boundUpdateInterval);
      this.server.to(lobby.id).emit("cancel_queue");
      this.gameService.createGame([newSeeker]);
      return;
    }


    this.findMatch(newSeeker);
  }

  @SubscribeMessage("cancel_queue")
  async handleCancelQueue(client: Socket) {
    const lobbyId = client.data.lobby_id;
    let seeker = LobbyGateway.searchQueue.find(s => s.id === lobbyId);
    if (!seeker) {
      return;
    }
    clearInterval(seeker.boundUpdateInterval);
    LobbyGateway.searchQueue = LobbyGateway.searchQueue.filter(s => s !== seeker);
    this.server.to(lobbyId).emit("cancel_queue");

  }


  findMatch(seeker: Seeker) {
    let suitableSeekers = LobbyGateway.searchQueue.filter(seeker2 =>
      seeker.id !== seeker2.id
      &&
      seeker.players.length + seeker2.players.length <= GAME_MAX_PLAYERS
      &&
      seeker.lowerBound <= seeker2.lowerBound
      &&
      seeker.upperBound >= seeker2.upperBound
      &&
      //—Å–º–æ—Ç—Ä–∏–º —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ö–æ—Ç—è–±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º –∏–≥—Ä—ã
      seeker.languages.some(t1 => seeker2.languages.includes(t1))
      &&
      seeker.gameType === seeker2.gameType
    );

    //—Ç–µ–ø–µ—Ä—å –Ω–∞–¥–æ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞—à–ª–æ —Å–æ–±—Ä–∞—Ç—å –Ω–∞–º —Ñ—É–ª –∏–≥—Ä—É
    /*
      –¥–≤–∞ —Ü–∏–∫–ª–∞ i –∏ j –¥–ª—è –∫–∞–∂–¥–æ–≥–æ i—Ç–æ–≥–æ –∏—â–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ j—Ç—ã—Ö —á—Ç–æ–±—ã 
  
    */

    let readyCombinations: Seeker[] = [];

    for (let i = 0; i < suitableSeekers.length; i++) {
      let comb: Seeker[] = [];
      comb.push(seeker, suitableSeekers[i]);
      if (countPlayers(comb) === GAME_MAX_PLAYERS) {
        readyCombinations = comb;
        break;
      }

      //comb.map(element => element.players.length).reduce((a, b) => a+b)
      //–¥–∞–ª–µ–µ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –µ—â—ë 
      let potentialComb = [...comb];
      for (let j = i + 1; j < suitableSeekers.length; j++) {
        if (countPlayers(potentialComb) + suitableSeekers[j].players.length > GAME_MAX_PLAYERS) {
          continue;
        }
        //–¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
        potentialComb.push(suitableSeekers[j]);
        //–µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∞
        if (countPlayers(potentialComb) === GAME_MAX_PLAYERS) {
          readyCombinations = potentialComb;
          break;
        }
      }
      if (readyCombinations.length !== 0) {
        break;
      }
    }

    if (readyCombinations.length === 0) {
      return;
    }

    readyCombinations.forEach(combi => {
      clearInterval(combi.boundUpdateInterval);
      this.server.to(combi.id).emit("cancel_queue");
    });
    console.log("üöÄ ~ file: lobby.gateway.ts:285 ~ LobbyGateway ~ findMatch ~ readyCombinations:", readyCombinations)



    this.gameService.createGame(readyCombinations);
  }
}


