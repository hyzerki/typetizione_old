generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model game {
  id                Int                 @id @default(autoincrement())
  type              game_type
  date_time         DateTime            @default(now()) @db.Timestamp(6)
  text_id           Int
  status            game_status         @default(not_started)
  text_to_type      text_to_type        @relation(fields: [text_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player_game_stats player_game_stats[]
}

model player {
  id                  Int                 @id @default(autoincrement())
  username            String              @unique @db.VarChar(20)
  rating              Int                 @default(1000) @db.SmallInt
  password            Bytes
  salt                Bytes
  initiated_relations friend_relation[]   @relation("friend_relation_friend_oneToplayer")
  proposed_relations  friend_relation[]   @relation("friend_relation_friend_twoToplayer")
  player_game_stats   player_game_stats[]
  refreshtoken        refreshtoken[]
}

model friend_relation {
  friend_one         Int
  friend_two         Int
  is_accepted        Boolean @default(false)
  related_player_one player  @relation("friend_relation_friend_oneToplayer", fields: [friend_one], references: [id], onDelete: NoAction, onUpdate: NoAction)
  related_player_two player  @relation("friend_relation_friend_twoToplayer", fields: [friend_two], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([friend_one, friend_two])
}

model player_game_stats {
  game_id     Int
  player_id   Int
  rating      Int?          @db.SmallInt
  rating_gain Int?          @db.SmallInt
  wpm         Decimal?      @db.Decimal(8, 2)
  cpm         Decimal?      @db.Decimal(8, 2)
  accuracy    Decimal?      @db.Decimal(5, 2)
  typing_time Decimal?      @db.Decimal(9, 3)
  status      player_status @default(not_connected)
  game        game          @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player      player        @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([game_id, player_id])
}

model refreshtoken {
  player_id Int
  token_str String
  is_used   Boolean  @default(false)
  emitted   DateTime @default(now()) @db.Timestamp(6)
  player    player   @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([player_id, token_str])
}

model text_to_type {
  id            Int           @id @default(autoincrement())
  text          String        @unique
  text_language text_language
  text_length   Int?          @db.SmallInt
  game          game[]
}

enum game_type {
  casual
  ranked
  training
}

enum text_language {
  russian
  english
}

enum game_status {
  not_started
  in_progress
  finished
}

enum player_status {
  not_connected
  left
  afk
  finished
}
